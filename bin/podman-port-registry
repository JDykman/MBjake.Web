#!/bin/bash
set -e

# Podman Port Registry
# Manages port allocations across multiple projects and environments
# to prevent port conflicts on shared servers

VERSION="1.0.0"
REGISTRY_DIR="${PODMAN_PORT_REGISTRY_DIR:-${HOME}/.local/share/podman-ports}"
REGISTRY_FILE="$REGISTRY_DIR/registry.json"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Port range for auto-allocation
PORT_RANGE_START=8000
PORT_RANGE_END=9000

# Initialize registry file if it doesn't exist
init_registry() {
    if [ ! -f "$REGISTRY_FILE" ]; then
        mkdir -p "$REGISTRY_DIR"
        echo '{"ports": {}, "metadata": {"version": "'$VERSION'", "created": "'$(date -Iseconds)'"}}' > "$REGISTRY_FILE"
        echo -e "${GREEN}✓ Initialized port registry at $REGISTRY_FILE${NC}"
    fi
}

# Function to display usage
usage() {
    cat << EOF
Podman Port Registry v${VERSION}

USAGE:
    podman-port-registry <command> [options]

COMMANDS:
    reserve <project> <environment> [port]
        Reserve a port for a project and environment.
        If port is not specified, auto-allocate next available port.
        
    release <project> <environment>
        Release the port reserved for a project and environment.
        
    list [project]
        List all reserved ports. Optionally filter by project name.
        
    check <port>
        Check if a port is available.
        
    find-next
        Find the next available port in the range.
        
    init
        Initialize the registry file (done automatically on first use).
        
    help
        Show this help message.

EXAMPLES:
    # Reserve specific port
    podman-port-registry reserve myapp prod 8080
    
    # Auto-allocate port
    podman-port-registry reserve myapp dev
    
    # Release port
    podman-port-registry release myapp dev
    
    # List all ports
    podman-port-registry list
    
    # Check if port is available
    podman-port-registry check 8080

ENVIRONMENT VARIABLES:
    PODMAN_PORT_REGISTRY_DIR    Directory for registry file
                                (default: ~/.local/share/podman-ports)

REGISTRY FILE:
    $REGISTRY_FILE

EOF
    exit 0
}

# Read registry
read_registry() {
    if [ ! -f "$REGISTRY_FILE" ]; then
        init_registry
    fi
    cat "$REGISTRY_FILE"
}

# Write registry
write_registry() {
    local content="$1"
    echo "$content" > "$REGISTRY_FILE"
}

# Check if port is in use by system
is_port_in_use_system() {
    local port="$1"
    
    if command -v ss &> /dev/null; then
        ss -tuln | grep -q ":${port}\s" && return 0
    elif command -v netstat &> /dev/null; then
        netstat -tuln | grep -q ":${port}\s" && return 0
    fi
    
    return 1
}

# Check if port is reserved in registry
is_port_reserved() {
    local port="$1"
    local registry=$(read_registry)
    echo "$registry" | jq -e ".ports.\"$port\"" > /dev/null 2>&1
}

# Get port for project-environment
get_port() {
    local project="$1"
    local environment="$2"
    local registry=$(read_registry)
    
    echo "$registry" | jq -r ".ports | to_entries[] | select(.value.project == \"$project\" and .value.environment == \"$environment\") | .key" | head -n1
}

# Find next available port
find_next_port() {
    local registry=$(read_registry)
    
    for port in $(seq $PORT_RANGE_START $PORT_RANGE_END); do
        if ! is_port_reserved "$port" && ! is_port_in_use_system "$port"; then
            echo "$port"
            return 0
        fi
    done
    
    echo -e "${RED}Error: No available ports in range $PORT_RANGE_START-$PORT_RANGE_END${NC}" >&2
    return 1
}

# Reserve a port
reserve_port() {
    local project="$1"
    local environment="$2"
    local port="$3"
    
    if [ -z "$project" ] || [ -z "$environment" ]; then
        echo -e "${RED}Error: Project and environment are required${NC}" >&2
        echo "Usage: podman-port-registry reserve <project> <environment> [port]" >&2
        return 1
    fi
    
    # Check if project-environment already has a port
    local existing_port=$(get_port "$project" "$environment")
    if [ -n "$existing_port" ]; then
        if [ -z "$port" ] || [ "$port" == "$existing_port" ]; then
            echo -e "${GREEN}✓ Port $existing_port already reserved for $project-$environment${NC}" >&2
            echo "$existing_port"
            return 0
        else
            echo -e "${YELLOW}⚠ Port $existing_port already reserved for $project-$environment${NC}" >&2
            echo -e "${YELLOW}  Release it first to change the port${NC}" >&2
            return 1
        fi
    fi
    
    # Auto-allocate if not specified
    if [ -z "$port" ]; then
        port=$(find_next_port)
        if [ $? -ne 0 ]; then
            return 1
        fi
        echo -e "${BLUE}Auto-allocated port: $port${NC}" >&2
    fi
    
    # Validate port number
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo -e "${RED}Error: Invalid port number: $port${NC}" >&2
        return 1
    fi
    
    # Check if port is already reserved
    if is_port_reserved "$port"; then
        local reserved_info=$(read_registry | jq -r ".ports.\"$port\" | \"\(.project)-\(.environment)\"")
        echo -e "${RED}Error: Port $port is already reserved by $reserved_info${NC}" >&2
        return 1
    fi
    
    # Check if port is in use by system
    if is_port_in_use_system "$port"; then
        echo -e "${RED}Error: Port $port is already in use by another process${NC}" >&2
        return 1
    fi
    
    # Reserve the port
    local registry=$(read_registry)
    local timestamp=$(date -Iseconds)
    
    registry=$(echo "$registry" | jq ".ports.\"$port\" = {
        \"project\": \"$project\",
        \"environment\": \"$environment\",
        \"reserved_at\": \"$timestamp\",
        \"reserved_by\": \"$USER\"
    }")
    
    write_registry "$registry"
    
    echo -e "${GREEN}✓ Reserved port $port for $project-$environment${NC}" >&2
    echo "$port"
    return 0
}

# Release a port
release_port() {
    local project="$1"
    local environment="$2"
    
    if [ -z "$project" ] || [ -z "$environment" ]; then
        echo -e "${RED}Error: Project and environment are required${NC}" >&2
        echo "Usage: podman-port-registry release <project> <environment>" >&2
        return 1
    fi
    
    local port=$(get_port "$project" "$environment")
    
    if [ -z "$port" ]; then
        echo -e "${YELLOW}⚠ No port reserved for $project-$environment${NC}" >&2
        return 0
    fi
    
    local registry=$(read_registry)
    registry=$(echo "$registry" | jq "del(.ports.\"$port\")")
    write_registry "$registry"
    
    echo -e "${GREEN}✓ Released port $port for $project-$environment${NC}" >&2
    return 0
}

# List all ports
list_ports() {
    local filter_project="$1"
    local registry=$(read_registry)
    
    echo ""
    echo "======================================"
    echo "Podman Port Registry"
    echo "======================================"
    
    local ports=$(echo "$registry" | jq -r '.ports | to_entries[] | "\(.key)|\(.value.project)|\(.value.environment)|\(.value.reserved_at)|\(.value.reserved_by)"')
    
    if [ -z "$ports" ]; then
        echo "No ports reserved."
        echo ""
        return 0
    fi
    
    printf "%-8s %-20s %-12s %-28s %-12s\n" "PORT" "PROJECT" "ENVIRONMENT" "RESERVED AT" "RESERVED BY"
    echo "------------------------------------------------------------------------------------------------------"
    
    echo "$ports" | while IFS='|' read -r port project environment reserved_at reserved_by; do
        if [ -z "$filter_project" ] || [ "$project" == "$filter_project" ]; then
            printf "%-8s %-20s %-12s %-28s %-12s\n" "$port" "$project" "$environment" "$reserved_at" "$reserved_by"
        fi
    done
    
    echo ""
}

# Check if port is available
check_port() {
    local port="$1"
    
    if [ -z "$port" ]; then
        echo -e "${RED}Error: Port number is required${NC}" >&2
        echo "Usage: podman-port-registry check <port>" >&2
        return 1
    fi
    
    if is_port_reserved "$port"; then
        local registry=$(read_registry)
        local info=$(echo "$registry" | jq -r ".ports.\"$port\" | \"\(.project)-\(.environment) (reserved by \(.reserved_by) at \(.reserved_at))\"")
        echo -e "${RED}✗ Port $port is reserved: $info${NC}" >&2
        return 1
    fi
    
    if is_port_in_use_system "$port"; then
        echo -e "${RED}✗ Port $port is in use by another process${NC}" >&2
        return 1
    fi
    
    echo -e "${GREEN}✓ Port $port is available${NC}" >&2
    return 0
}

# Main command router
case "${1:-}" in
    reserve)
        init_registry
        reserve_port "$2" "$3" "$4"
        ;;
    release)
        init_registry
        release_port "$2" "$3"
        ;;
    list)
        init_registry
        list_ports "$2"
        ;;
    check)
        init_registry
        check_port "$2"
        ;;
    find-next)
        init_registry
        find_next_port
        ;;
    init)
        init_registry
        ;;
    help|--help|-h)
        usage
        ;;
    "")
        echo -e "${RED}Error: No command specified${NC}"
        echo ""
        usage
        ;;
    *)
        echo -e "${RED}Error: Unknown command: $1${NC}"
        echo ""
        usage
        ;;
esac

